#ifndef cl_khr_fp64
typedef ulong dt_float64;
typedef float dt_float64_work;

dt_float64_work normalize_input_float64(dt_float64 h) {
    uint sign     = (h >> 63) & 0x1;
    int  exponent = (int)((h >> 52) & 0x7FF);
    ulong mantissa = h & 0xFFFFFFFFFFFFFUL;

    if (exponent == 0x7FF) {
        uint f_sign = sign << 31;
        if (mantissa != 0) {
            return as_float(f_sign | 0x7FC00000);
        } else {
            return as_float(f_sign | 0x7F800000);
        }
    }

    int f_exp;
    uint f_mant;

    if (exponent == 0) {
        f_exp = 0;
        f_mant = 0;
    } else {
        exponent -= 1023;
        exponent += 127;

        if (exponent <= 0) {
            f_exp = 0;
            f_mant = 0;
        } else if (exponent >= 0xFF) {
            return as_float((sign << 31) | 0x7F800000);
        } else {
            f_exp = exponent;
            ulong full_mant = mantissa | (1UL << 52);
            f_mant = (uint)(full_mant >> (52 - 23));
        }
    }

    uint floatBits = (sign << 31) | ((f_exp & 0xFF) << 23) | (f_mant & 0x7FFFFF);
    return as_float(floatBits);
}

dt_float64 normalize_output_float64(dt_float64_work f) {
    uint i = as_uint(f);
    uint sign = (i >> 31) & 0x1;
    int exp = (int)((i >> 23) & 0xFF);
    uint frac = i & 0x7FFFFF;

    ulong out_sign = ((ulong)sign) << 63;
    int out_exp;
    ulong out_frac;

    if (exp == 0) {
        if (frac == 0) {
            return out_sign;
        } else {
            int shift = 0;
            uint mant = frac;
            while ((mant & 0x400000) == 0) {
                mant <<= 1;
                shift++;
            }
            mant &= 0x3FFFFF;
            out_exp = 1023 - 127 - shift + 1;
            out_frac = ((ulong)mant) << (52 - 23);
            return out_sign | ((ulong)out_exp << 52) | out_frac;
        }
    } else if (exp == 0xFF) {
        out_exp = 0x7FF;
        out_frac = (frac != 0) ? (((ulong)frac) << (52 - 23)) | 0x0008000000000000UL : 0;
        return out_sign | ((ulong)out_exp << 52) | out_frac;
    } else {
        out_exp = exp - 127 + 1023;
        out_frac = ((ulong)frac) << (52 - 23);
        return out_sign | ((ulong)out_exp << 52) | out_frac;
    }
}
#else
#pragma OPENCL EXTENSION cl_khr_fp64 : enable

typedef double dt_float64;
typedef double dt_float64_work;

static inline dt_float64_work dt_normalize_input_float64(dt_float64 x)  { return x; }
static inline dt_float64 dt_normalize_output_float64(dt_float64_work x) { return x; }
#endif