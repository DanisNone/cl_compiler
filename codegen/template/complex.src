#ifndef __DTYPES_$name$__
#define __DTYPES_$name$__

#include "dtypes/bool.cl"
#include "dtypes/$floatname$.cl"

typedef struct {
    dt_$floatname$ real, imag;
} dt_$name$;

typedef struct {
    dt_$floatname$_work real, imag;
} dt_$name$_work;

dt_$name$ dt_make_$name$(dt_$floatname$ real, dt_$floatname$ imag) {
    dt_$name$ res;
    res.real = real;
    res.imag = imag;
    return res;
}

dt_$name$_work dt_make_$name$_work(dt_$floatname$_work real, dt_$floatname$_work imag) {
    dt_$name$_work res;
    res.real = real;
    res.imag = imag;
    return res;
}


dt_$name$_work dt_normalize_input_$name$(dt_$name$ x) {
    return dt_make_$name$_work(
        dt_normalize_input_$floatname$(x.real),
        dt_normalize_input_$floatname$(x.imag)
    );
}

dt_$name$ dt_normalize_output_$name$(dt_$name$_work x) {
    return dt_make_$name$(
        dt_normalize_output_$floatname$(x.real),
        dt_normalize_output_$floatname$(x.imag)
    );
}

dt_$name$_work dt_zero_$name$() { return dt_make_$name$_work(0, 0); }
dt_$name$_work dt_one_$name$() { return dt_make_$name$_work(1, 0); }

!ADDFUNC add
dt_$name$_work dt_add_$name$(dt_$name$_work x, dt_$name$_work y) {
    return dt_make_$name$_work(
        x.real + y.real,
        x.imag + y.imag
    );
}


!ADDFUNC subtract
dt_$name$_work dt_subtract_$name$(dt_$name$_work x, dt_$name$_work y) {
    return dt_make_$name$_work(
        x.real - y.real,
        x.imag - y.imag
    );
}

!ADDFUNC multiply
dt_$name$_work dt_multiply_$name$(dt_$name$_work x, dt_$name$_work y) {
    return dt_make_$name$_work(
        x.real * y.real - x.imag * y.imag,
        x.real * y.imag + x.imag * y.real
    );
}

!ADDFUNC divide
dt_$name$_work dt_divide_$name$(dt_$name$_work x, dt_$name$_work y) {
    double denominator = y.real * y.real + y.imag * y.imag;
    return dt_make_$name$_work(
        (x.real * y.real + x.imag * y.imag) / denominator,
        (x.imag * y.real - x.real * y.imag) / denominator
    );
}

!ADDFUNC square
dt_$name$_work dt_square_$name$(dt_$name$_work x) {
    return dt_make_$name$_work(
        (x.real - x.imag) * (x.real + x.imag),
        2 * x.real * x.imag
    );
}

!ADDFUNC log
dt_$name$_work dt_log_$name$(dt_$name$_work x) {
    return dt_make_$name$_work(
        log(hypot(x.real, x.imag)),
        atan2(x.imag, x.real)
    );
}

!ADDFUNC log2
dt_$name$_work dt_log2_$name$(dt_$name$_work x) {
    return dt_make_$name$_work(
        log2(hypot(x.real, x.imag)),
        atan2(x.imag, x.real) / dt_const_log2_$floatname$
    );
}

!ADDFUNC log10
dt_$name$_work dt_log10_$name$(dt_$name$_work x) {
    return dt_make_$name$_work(
        log10(hypot(x.real, x.imag)),
        atan2(x.imag, x.real) / dt_const_log10_$floatname$
    );
}

!ADDFUNC exp
dt_$name$_work dt_exp_$name$(dt_$name$_work x) {
    dt_$floatname$_work exp_ = exp(x.real);
    return dt_make_$name$_work(
        exp_ * cos(x.imag),
        exp_ * sin(x.imag)
    );
}


!ADDFUNC exp2
dt_$name$_work dt_exp2_$name$(dt_$name$_work x) {
    dt_$floatname$_work exp_ = exp2(x.real);
    dt_$floatname$_work angle = x.imag * dt_const_log2_$floatname$;
    
    return dt_make_$name$_work(
        exp_ * cos(angle),
        exp_ * sin(angle)
    );
}

!ADDFUNC exp10
dt_$name$_work dt_exp10_$name$(dt_$name$_work x) {
    dt_$floatname$_work exp_ = exp10(x.real);
    dt_$floatname$_work angle = x.imag * dt_const_log10_$floatname$;
    
    return dt_make_$name$_work(
        exp_ * cos(angle),
        exp_ * sin(angle)
    );
}

!ADDFUNC power
dt_$name$_work dt_power_$name$(dt_$name$_work x, dt_$name$_work y) {
    return dt_exp_$name$(dt_multiply_$name$(dt_log_$name$(x), y));
}

!ADDFUNC equal
dt_bool_work dt_equal_$name$(dt_$name$_work x, dt_$name$_work y) {
    return x.real == y.real && x.imag == y.imag;
}

!ADDFUNC not_equal
dt_bool_work dt_not_equal_$name$(dt_$name$_work x, dt_$name$_work y) {
    return x.real != y.real || x.imag != y.imag;
}

dt_$name$_work dt_negative_$name$(dt_$name$_work x) {
    return dt_make_$name$_work(-x.real, -x.imag);
}

!ADDFUNC abs
dt_$floatname$_work dt_abs_$name$(dt_$name$_work x) {
    return hypot(x.real, x.imag);
}

#endif